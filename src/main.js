const {HtmlTelegramBot, userInfoToString} = require("./bot");
const ChatGptService = require("./gpt");

class MyTelegramBot extends HtmlTelegramBot {
    constructor(token) {
        super(token);
        this.mode = null;
        this.list = []
        this.user = {}
        this.count = 0
    }

    async start(msg) {
        this.mode = "main"
        const text = this.loadMessage("main")
        await this.sendImage("main");
        await this.sendText(text);

        await this.showMainMenu({
            "start": "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞",
            "profile": "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è Tinder-–ø—Ä–æ—Ñ–∏–ª—è üòé",
            "opener": "—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ü•∞",
            "message": "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ üòà",
            "date": "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ üî•",
            "gpt": "–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT üß†",
            "html": "–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è HTML"
        })
    }

    async html(msg) {
        await this.sendHTML('<h3 style="color: antiquewhite">–ü—Ä–∏–≤–µ—Ç!</h3>')
        const html = this.loadHtml("main")
        await this.sendHTML(html, {theme: "dark"})
    }

    async gpt(msg) {
        this.mode = "gpt"
        const text = this.loadMessage("gpt")
        await this.sendImage("gpt");
        await this.sendText(text);
    }

    async gptDialog(msg) {
        const text = msg.text;
        const myMessage = await this.sendText("ChatGPT –¥—É–º–∞–µ—Ç –Ω–∞–¥ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞...")
        const prompt = this.loadPrompt("gpt")
        const answer = await chatGpt.sendQuestion("–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å", text)
        await bot.editText(myMessage, answer)
    }

    async date(msg) {
        this.mode = "date"
        const text = this.loadMessage("date")
        await this.sendImage("date");
        await this.sendTextButtons(text, {
            "date_grande": "–ê—Ä–∏–∞–Ω–∞ –ì—Ä–∞–Ω–¥–µ",
            "date_robbie": "–ú–∞—Ä–≥–æ –†–æ–±–±–∏",
            "date_zendaya": "–ó–µ–Ω–¥–µ—è",
            "date_gosling": "–†–∞–π–∞–Ω –ì–æ—Å–ª–∏–Ω–≥",
            "date_hardy": "–¢–æ–º –•–∞—Ä–¥–∏"
        });
    }

    async dateButtons(callBackQuery) {
        const query = callBackQuery.data;
        await this.sendImage(query);
        const prompt = this.loadPrompt(query)
        chatGpt.setPrompt(prompt)
    }

    async dateDialog(msg) {
        const text = msg.text;
        const myMessage = await this.sendText("–î–µ–≤—É—à–∫–∞ –Ω–∞–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç...")
        const answer = await chatGpt.addMessage(text)
        await this.editText(myMessage, answer)
    }

    async message(msg) {
        this.mode = "message"
        const text = this.loadMessage("message")
        await this.sendImage("message");
        await this.sendTextButtons(text, {
            "message_next": "–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "message_date": "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ"
        });
    }

    async messageButtons(callBackQuery) {
        const query = callBackQuery.data;
        const prompt = this.loadPrompt(query)
        const userChatHistory = this.list.join("\n\n")

        const myMessage = await this.sendText("ChatGPT –¥—É–º–∞–µ—Ç –Ω–∞–¥ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞...")
        const answer = await chatGpt.sendQuestion(prompt, userChatHistory)
        await this.editText(myMessage, answer)
    }

    async messageDialog(msg) {
        const text = msg.text;
        this.list.push(text)
    }

    async profile(msg) {
        this.mode = "profile"
        const text = this.loadMessage("profile")
        await this.sendImage("profile");
        await this.sendText(text);

        this.user = {}
        this.count = 0
        await this.sendText("–°–∫–æ–ª—å–∫–æ –í–∞–º –ª–µ—Ç?")
    }


    async profileDialog(msg) {
        const text = msg.text;
        this.count++
        if (this.count === 1) {
            this.user["age"] = text;
            await this.sendText("–ö–µ–º –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?")
        } else if (this.count === 2) {
            this.user["occupation"] = text;
            await this.sendText("–£ –í–∞—Å –µ—Å—Ç—å —Ö–æ–±–±–∏?")
        } else if (this.count === 3) {
            this.user["hobby"] = text;
            await this.sendText("–ß—Ç–æ –í–∞–º –ù–ï –Ω—Ä–∞–≤–∏—Ç—å—Å—è –≤ –ª—é–¥—è—Ö?")
        } else if (this.count === 4) {
            this.user["annoys"] = text;
            await this.sendText("–¶–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?")
        } else if (this.count === 5) {
            this.user["goals"] = text;
            const myMessage = await this.sendText("ChatGPT –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –í–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è...")
            const prompt = this.loadPrompt("profile")
            const info = userInfoToString(this.user)
            const answer = await chatGpt.sendQuestion(prompt, info)
            await bot.editText(myMessage, answer)
        }
    }

    async opener(msg) {
        this.mode = "opener"
        const text = this.loadMessage("opener")
        await this.sendImage("opener");
        await this.sendText(text);

        this.user = {}
        this.count = 0
        await this.sendText("–ò–º—è –¥–µ–≤—É—à–∫–∏?")
    }


    async openerDialog(msg) {
        const text = msg.text;
        this.count++
        if (this.count === 1) {
            this.user["name"] = text;
            await this.sendText("–°–∫–æ–ª—å–∫–æ –µ–π –ª–µ—Ç?")
        } else if (this.count === 2) {
            this.user["age"] = text;
            await this.sendText("–û—Ü–µ–Ω–∏—Ç–µ –µ–µ –≤–Ω–µ—à–Ω–æ—Å—Ç—å: 1-10 –±–∞–ª–ª–æ–≤")
        } else if (this.count === 3) {
            this.user["handsome"] = text;
            await this.sendText("–ö–µ–º –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç?")
        } else if (this.count === 4) {
            this.user["occupation"] = text;
            await this.sendText("–¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?")
        } else if (this.count === 5) {
            this.user["goals"] = text;
            const myMessage = await this.sendText("ChatGPT –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ–ø–µ–Ω–µ—Ä–∞...")
            const prompt = this.loadPrompt("opener")
            const info = userInfoToString(this.user)
            const answer = await chatGpt.sendQuestion(prompt, info)
            await bot.editText(myMessage, answer)
        }
    }


    async hello(msg) {
        if (this.mode === "gpt")
            await this.gptDialog(msg)
        else if (this.mode === "date")
            await this.dateDialog(msg)
        else if (this.mode === "message")
            await this.messageDialog(msg)
        else if (this.mode === "profile")
            await this.profileDialog(msg)
        else if (this.mode === "opener")
            await this.openerDialog(msg)
        else {
            const text = msg.text;
            await this.sendText('<b>"–ü—Ä–∏–≤–µ—Ç!"</b>')
            await this.sendText('<i>"–ö–∞–∫ –¥–µ–ª–∞?"</i>')
            await this.sendText(`–í—ã –ø–∏—Å–∞–ª–∏ ${text}`)

            await this.sendImage("avatar_main")
            await this.sendTextButtons("–ö–∞–∫–∞—è —É –í–∞—Å —Ç–µ–º–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º–º?", {
                "theme_light": "–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞",
                "theme_dark": "–¢–µ–º–Ω–∞—è —Ç–µ–º–∞"
            })
        }
    }

    async helloButtons(callBackQuery) {
        const query = callBackQuery.data;
        if (query === "theme_light")
            await this.sendText("–£ –í–∞—Å —Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞")
        else if (query === "theme_dark")
            await this.sendText("–£ –í–∞—Å —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞")
    }
}

const chatGpt = new ChatGptService("GPT_TOKEN")
const bot = new MyTelegramBot("TELEGRAM_TOKEN");
bot.onCommand(/\/start/, bot.start)
bot.onCommand(/\/html/, bot.html)
bot.onCommand(/\/gpt/, bot.gpt)
bot.onCommand(/\/date/, bot.date)
bot.onCommand(/\/message/, bot.message)
bot.onCommand(/\/profile/, bot.profile)
bot.onCommand(/\/opener/, bot.opener)
bot.onTextMessage(bot.hello)
bot.onButtonCallback(/^date_.*/, bot.dateButtons)
bot.onButtonCallback(/^message_.*/, bot.messageButtons)
bot.onButtonCallback(/^.*/, bot.helloButtons)